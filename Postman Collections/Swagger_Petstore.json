{
	"info": {
		"_postman_id": "3f861c90-e984-4bfa-9283-6bfbd69e0abc",
		"name": "Swagger Petstore",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"item": [
						{
							"name": "Successful operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba184ffc-891a-457d-9642-e102e3c91ddd",
										"exec": [
											"",
											"pm.test(\"Successful operation\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate id field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Validate the name field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the photoUrls array is present and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.photoUrls).to.exist.and.to.be.an('array').that.has.lengthOf.at.least(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cae394a0-06d4-477a-9c14-af2092eac575",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}\n"
								},
								"url": "{{baseURL}}/pet"
							},
							"response": []
						},
						{
							"name": "Invalid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d12cd05-e8ea-4596-870a-e09f558c4a8f",
										"exec": [
											"pm.test(\"Invalid input\", function () {",
											"    pm.response.to.have.status(405);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.type).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.code).to.be.a('number');",
											"    pm.expect(responseData.code).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Type is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ec8e7c0c-8207-434a-9619-2190ec25b2f7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/pet"
							},
							"response": []
						}
					],
					"id": "8fae869f-5a1d-4b07-a290-78058beed640"
				},
				{
					"name": "Uploads an image",
					"item": [
						{
							"name": "Successful operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "733c8b4b-c5f4-4c55-abdf-5f8222f0de38",
										"exec": [
											"",
											"pm.test(\"Successful operation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.type).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.code).to.be.a('number');",
											"    pm.expect(responseData.code).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Type is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "46eef211-3614-4ecc-8005-d24068799e9c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/Users/sarker/Desktop/Untitled.jpg"
										},
										{
											"key": "additionalMetadata",
											"value": "ok",
											"type": "text"
										}
									]
								},
								"url": "{{baseURL}}/pet/1/uploadImage"
							},
							"response": []
						}
					],
					"id": "8c33047c-3973-4d9b-9162-b266b4a0c6b9"
				},
				{
					"name": "Update an existing pet",
					"item": [
						{
							"name": "Successful operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50dc4553-c436-4a4b-8d52-eb9311e9444c",
										"exec": [
											"",
											"pm.test(\"Successful operation\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the id field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the category object has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.category).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.category.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.category.name).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"The name field should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify photoUrls array is present and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.photoUrls).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.photoUrls).to.have.lengthOf.at.least(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2e6af7cb-42dc-459a-8564-2e576d73bbb2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
								},
								"url": "{{baseURL}}/pet"
							},
							"response": []
						},
						{
							"name": "Invalid ID supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32d3b9b4-c4d7-4cf1-a5bd-36c946bc6d1c",
										"exec": [
											"",
											"pm.test(\"Invalid ID supplied\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Validate response code and message fields\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"    pm.expect(pm.response.json().message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Type should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c61f7370-b434-4ebb-b145-0a0eee8e87bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": q,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
								},
								"url": "{{baseURL}}/pet"
							},
							"response": []
						},
						{
							"name": "Pet not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52912f16-40bd-476a-bc49-543b4a798614",
										"exec": [
											"",
											"pm.test(\"Pet not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'code' field in the response\", function () {",
											"    pm.expect(pm.response.json().code).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'type' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.type).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'message' field in the response\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a9781c3c-59b8-4901-9028-ac89bce9e70e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/pet1"
							},
							"response": []
						},
						{
							"name": "Validation exception",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc91a37c-37f4-45c4-baaf-0f2ed6b4e8b3",
										"exec": [
											"",
											"pm.test(\"Validation exception\", function () {",
											"    pm.expect(pm.response.code).to.equal(405);",
											"});",
											"",
											"",
											"pm.test(\"Validate response body has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.type).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.code).to.be.a('number');",
											"    pm.expect(responseData.code).to.be.at.least(0, \"Code should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Type is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.type).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The message should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3e55e2a2-bb61-4c69-add6-50d294756a96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/pet"
							},
							"response": []
						}
					],
					"id": "3655b519-4757-4ac0-9aba-d7cb62f1c580"
				},
				{
					"name": "Finds Pets by status",
					"item": [
						{
							"name": "Successful operation available pets",
							"id": "2c366db7-e496-49f6-bdef-ecb93feb9365",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/pet/findByStatus?status=available",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful operation pending pets",
							"id": "7540ea5b-961d-4a4a-b926-335f82823eb4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/pet/findByStatus?status=available",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful operation sold pets",
							"id": "08c487af-bfc8-4de6-b33c-1c43e6719173",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/pet/findByStatus?status=available",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid status value",
							"id": "661aa693-5679-4d2e-9995-1dd316e1bc88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "1bc7eb18-019c-4aef-8162-8c819fc65ae2"
				},
				{
					"name": "Finds Pets by tags",
					"item": [
						{
							"name": "Successful operation",
							"id": "2d61cb9f-9362-4fed-b827-3b3cccce35ac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Invalid tag value",
							"id": "b4308411-5520-444c-ab08-6213af4d2c52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "e7f905cf-497b-425e-bf66-a0a8fc78dc72"
				},
				{
					"name": "Updates a pet in the store with form data",
					"item": [
						{
							"name": "Successful operation",
							"id": "27ef38f9-1743-47d3-aa7c-f10c91534e91",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Invalid input",
							"id": "f6bd34c3-2636-48ad-8e3e-71e47d491fa6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "e9ea6edc-0f8b-4700-929a-1bd9d363cb3b"
				},
				{
					"name": "Find pet by ID",
					"item": [
						{
							"name": "Successful operation",
							"id": "c1f74fb2-7b1e-47e9-bdb9-0d30849a3cab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Invalid ID supplied",
							"id": "480a52ea-7b98-4356-ae31-97ff5b36a978",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Pet not found",
							"id": "1255b046-2843-4ed5-ad71-2b02396d45b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "8c06eaba-5d5e-4cf2-99fd-16a39ec7ca8d"
				},
				{
					"name": "Deletes a pet",
					"item": [
						{
							"name": "Successful operation",
							"id": "c3fff72f-5925-4e1e-9044-7fdbb0459398",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Invalid ID supplied",
							"id": "48dc48e8-a47e-4d0d-9e4a-54284c22854d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Pet not found",
							"id": "2d8c05be-001e-4a27-87e3-e37f5834f9ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "e843495c-200d-4362-90a7-0be118a09415"
				}
			],
			"id": "d177ff21-40da-479a-a963-93a0785add8d"
		},
		{
			"name": "store",
			"item": [
				{
					"name": "Place an order for a pet",
					"item": [
						{
							"name": "Successful operation",
							"id": "9ba8cfd3-da73-4c94-ad5b-d46d4327a360",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Invalid Order",
							"id": "b10ea218-7906-4c29-ba42-b9623cb382f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "206622a1-52c7-4469-ae35-887a44add5c6"
				},
				{
					"name": "Find purchase order by ID",
					"item": [
						{
							"name": "Successful operation",
							"id": "ae730b81-1ab2-4ed2-8da0-f2308debe350",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Invalid ID supplied",
							"id": "e3b1dd6d-0199-49da-8eb4-d5e1ef2011d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Order not found",
							"id": "1092ffc1-be16-4e14-8241-32f9a9b8020b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "3f4dfae1-88a0-4daa-a838-74514fc73ea2"
				},
				{
					"name": "Delete purchase order by ID",
					"item": [
						{
							"name": "Successful operation",
							"id": "a5dae643-0090-4e26-8b56-73a8d14aa55a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Invalid ID supplied",
							"id": "ecc6a5e2-4103-4f2f-98d0-fc1c32203bba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Order not found",
							"id": "3f95a46c-e3b8-4b8c-94dd-1360fe1dd8a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "3ff6b7e5-12ee-4c35-9f19-f3e9965f29df"
				},
				{
					"name": "Returns pet inventories by status",
					"item": [
						{
							"name": "Successful operation",
							"id": "071997f3-e068-4d73-8389-721849c961d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						}
					],
					"id": "5516008b-c2b9-4f27-b716-3a4db120f1eb"
				}
			],
			"id": "77e67129-5522-4514-aea7-6a0c7d924271"
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Creates list of users with given input array",
					"item": [
						{
							"name": "Successful operation",
							"id": "657cef06-839e-4aea-9f09-b033f9c836fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": 0,\n    \"username\": \"string\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]"
								},
								"url": "{{baseURL}}/user/createWithArray"
							},
							"response": []
						}
					],
					"id": "413ddcdc-eac5-4f30-9aea-26857b248dc7"
				},
				{
					"name": "Creates list of users with given input array",
					"item": [
						{
							"name": "Successful operation",
							"id": "9c8151ae-c1f2-4beb-93fc-92b8242a7691",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": 0,\n    \"username\": \"string\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]"
								},
								"url": "{{baseURL}}/user/createWithList"
							},
							"response": []
						}
					],
					"id": "7dd5dca2-d657-42a4-9756-2961ed78d6d0"
				},
				{
					"name": "Get user by user name",
					"item": [
						{
							"name": "Successful operation",
							"id": "10c19170-b0e1-4a65-8312-cdc63b3d5514",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						},
						{
							"name": "Invalid username supplied",
							"id": "bd01f959-aa3a-44c8-89aa-029f2d6b43e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						},
						{
							"name": "User not found",
							"id": "fc3b36b3-8ed3-496f-88b4-aa7627bdb1f4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						}
					],
					"id": "08a64c76-3ae6-47c5-8d01-e0b5b3225108"
				},
				{
					"name": "Updated user",
					"item": [
						{
							"name": "Successful operation",
							"id": "6aaeca98-e3d0-486b-83d7-b6cfd5d628ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"
								},
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						},
						{
							"name": "Invalid user supplied",
							"id": "db306117-7334-4fa8-9955-483f4e1bbbc3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"
								},
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						},
						{
							"name": "User not found",
							"id": "959d7895-fec2-4f2d-9b6d-60d83cb4a1d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"
								},
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						}
					],
					"id": "fc998de2-278c-477f-b04a-9615b75a1a44"
				},
				{
					"name": "Delete user",
					"item": [
						{
							"name": "Successful operation",
							"id": "246e99b2-8932-42f6-beab-89c16743aeb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						},
						{
							"name": "Invalid username supplied",
							"id": "8b9bc325-75d8-4c6f-8104-e014c6427132",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						},
						{
							"name": "User not found",
							"id": "2a8b7dcc-9ade-41d2-a4c2-d852eefc11b9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/user/string"
							},
							"response": []
						}
					],
					"id": "8a6910fa-21f0-4864-b087-ed8deba1e414"
				},
				{
					"name": "Logs user into the system",
					"item": [
						{
							"name": "Successful operation",
							"id": "a418c158-8af4-4803-8d9c-f4b537e93877",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/user/login?username=string&password=1234",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "string"
										},
										{
											"key": "password",
											"value": "1234"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid username/password supplied",
							"id": "8caf7ad4-407c-4282-970c-c8f65b3771ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/user/login?username=string&password=1234",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "string"
										},
										{
											"key": "password",
											"value": "1234"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0abdefa4-02c7-4064-9a65-a129ce0296df"
				},
				{
					"name": "Logs out current logged in user session",
					"item": [
						{
							"name": "Successful operation",
							"id": "51b50b34-7128-43a1-b727-7ca896b611c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/user/logout"
							},
							"response": []
						}
					],
					"id": "7eed0443-947d-4d81-9a10-f87c3cc9de1d"
				},
				{
					"name": "Create user",
					"item": [
						{
							"name": "Successful operation",
							"id": "448e6ec2-d5d3-44c8-ba9e-38bea1e60730",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"
								},
								"url": "{{baseURL}}/user"
							},
							"response": []
						}
					],
					"id": "58d9dc93-c732-4ef6-a633-4b069000a41e"
				}
			],
			"id": "f267d8ca-57ed-4293-aace-25d811e9e5b2"
		}
	],
	"variable": [
		{
			"id": "370f5aa1-aacd-4503-b1c2-6a4dc922ae14",
			"key": "baseURL",
			"value": "https://petstore.swagger.io/v2"
		}
	]
}